
Progetto_Rocco_Picone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd0  08004bd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bd8  08004bd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08004c50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004c50  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa6f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ad  00000000  00000000  0002fb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00031bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00032978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f0c  00000000  00000000  00033668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdcc  00000000  00000000  0004a574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097310  00000000  00000000  0005a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dcc  00000000  00000000  000f16a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b40 	.word	0x08004b40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004b40 	.word	0x08004b40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc20 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f840 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f976 	bl	8000890 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005a4:	f000 f8fc 	bl	80007a0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f948 	bl	800083c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ac:	f000 f8a4 	bl	80006f8 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(state==1){
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <main+0x78>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d105      	bne.n	80005c4 <main+0x30>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2120      	movs	r1, #32
 80005bc:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x7c>)
 80005be:	f001 fce5 	bl	8001f8c <HAL_GPIO_WritePin>
 80005c2:	e7f5      	b.n	80005b0 <main+0x1c>
 	  }
	  else if(state==2){
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <main+0x78>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d1f1      	bne.n	80005b0 <main+0x1c>
		  t1=uiAnalogData;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <main+0x80>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <main+0x84>)
 80005d4:	601a      	str	r2, [r3, #0]
		  t2=255-t1;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <main+0x84>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <main+0x88>)
 80005e0:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <main+0x7c>)
 80005e8:	f001 fcd0 	bl	8001f8c <HAL_GPIO_WritePin>
		  HAL_Delay(t1);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x84>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fc65 	bl	8000ec0 <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <main+0x7c>)
 80005fc:	f001 fcc6 	bl	8001f8c <HAL_GPIO_WritePin>
		  HAL_Delay(t2);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <main+0x88>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fc5b 	bl	8000ec0 <HAL_Delay>
	  if(state==1){
 800060a:	e7d1      	b.n	80005b0 <main+0x1c>
 800060c:	20000168 	.word	0x20000168
 8000610:	40020000 	.word	0x40020000
 8000614:	2000016c 	.word	0x2000016c
 8000618:	2000008c 	.word	0x2000008c
 800061c:	20000090 	.word	0x20000090

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fe10 	bl	8004254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <SystemClock_Config+0xd0>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemClock_Config+0xd4>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000694:	2310      	movs	r3, #16
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000698:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fcac 	bl	8002008 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b6:	f000 f961 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 ff0e 	bl	80024f8 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e2:	f000 f94b 	bl	800097c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_ADC1_Init+0x9c>)
 800070c:	4a22      	ldr	r2, [pc, #136]	; (8000798 <MX_ADC1_Init+0xa0>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_ADC1_Init+0x9c>)
 8000712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000716:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0x9c>)
 800071a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC1_Init+0x9c>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC1_Init+0x9c>)
 8000728:	2200      	movs	r2, #0
 800072a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0x9c>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC1_Init+0x9c>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ADC1_Init+0x9c>)
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_ADC1_Init+0xa4>)
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC1_Init+0x9c>)
 8000748:	2201      	movs	r2, #1
 800074a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC1_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC1_Init+0x9c>)
 8000756:	2201      	movs	r2, #1
 8000758:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <MX_ADC1_Init+0x9c>)
 800075c:	f000 fbd4 	bl	8000f08 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000766:	f000 f909 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_ADC1_Init+0x9c>)
 800077c:	f000 feb6 	bl	80014ec <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000786:	f000 f8f9 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000094 	.word	0x20000094
 8000798:	40012000 	.word	0x40012000
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM2_Init+0x98>)
 80007be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_TIM2_Init+0x98>)
 80007c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80007ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_TIM2_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 41999;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_TIM2_Init+0x98>)
 80007d4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80007d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_TIM2_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM2_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_TIM2_Init+0x98>)
 80007e8:	f002 f8a6 	bl	8002938 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007f2:	f000 f8c3 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4619      	mov	r1, r3
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_TIM2_Init+0x98>)
 8000804:	f002 fa52 	bl	8002cac <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800080e:	f000 f8b5 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_TIM2_Init+0x98>)
 8000820:	f002 fc58 	bl	80030d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800082a:	f000 f8a7 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000dc 	.word	0x200000dc

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f002 fcb0 	bl	80031d8 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f87d 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000124 	.word	0x20000124
 800088c:	40004400 	.word	0x40004400

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a30      	ldr	r2, [pc, #192]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a29      	ldr	r2, [pc, #164]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a22      	ldr	r2, [pc, #136]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_GPIO_Init+0xe0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_GPIO_Init+0xe0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_GPIO_Init+0xe0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_GPIO_Init+0xe0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	4816      	ldr	r0, [pc, #88]	; (8000974 <MX_GPIO_Init+0xe4>)
 800091c:	f001 fb36 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000926:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4810      	ldr	r0, [pc, #64]	; (8000978 <MX_GPIO_Init+0xe8>)
 8000938:	f001 f9a4 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093c:	2320      	movs	r3, #32
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_GPIO_Init+0xe4>)
 8000954:	f001 f996 	bl	8001c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f001 f8c8 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000962:	2028      	movs	r0, #40	; 0x28
 8000964:	f001 f8e1 	bl	8001b2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000
 8000978:	40020800 	.word	0x40020800

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c6:	2007      	movs	r0, #7
 80009c8:	f001 f888 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <HAL_ADC_MspInit+0x8c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12f      	bne.n	8000a5a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_ADC_MspInit+0x90>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_ADC_MspInit+0x90>)
 8000a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_ADC_MspInit+0x90>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_ADC_MspInit+0x90>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_ADC_MspInit+0x90>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_ADC_MspInit+0x90>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	2303      	movs	r3, #3
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <HAL_ADC_MspInit+0x94>)
 8000a46:	f001 f91d 	bl	8001c84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2012      	movs	r0, #18
 8000a50:	f001 f84f 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a54:	2012      	movs	r0, #18
 8000a56:	f001 f868 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40012000 	.word	0x40012000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a80:	d115      	bne.n	8000aae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_TIM_Base_MspInit+0x48>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <HAL_TIM_Base_MspInit+0x48>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_TIM_Base_MspInit+0x48>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	201c      	movs	r0, #28
 8000aa4:	f001 f825 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aa8:	201c      	movs	r0, #28
 8000aaa:	f001 f83e 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <HAL_UART_MspInit+0x94>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d133      	bne.n	8000b46 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_UART_MspInit+0x98>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <HAL_UART_MspInit+0x98>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_UART_MspInit+0x98>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x98>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <HAL_UART_MspInit+0x98>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_UART_MspInit+0x98>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_UART_MspInit+0x9c>)
 8000b32:	f001 f8a7 	bl	8001c84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2026      	movs	r0, #38	; 0x26
 8000b3c:	f000 ffd9 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b40:	2026      	movs	r0, #38	; 0x26
 8000b42:	f000 fff2 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f96a 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <ADC_IRQHandler+0x10>)
 8000bb6:	f000 fb5d 	bl	8001274 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */


  /* USER CODE END ADC_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000094 	.word	0x20000094

08000bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bca:	4829      	ldr	r0, [pc, #164]	; (8000c70 <TIM2_IRQHandler+0xac>)
 8000bcc:	f001 ff66 	bl	8002a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(state==1){
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <TIM2_IRQHandler+0xb0>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d135      	bne.n	8000c44 <TIM2_IRQHandler+0x80>
	  __HAL_TIM_SET_COUNTER(&htim2, 0); //imposta il valore del registro di conteggio del timer htim2 a 0.
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <TIM2_IRQHandler+0xac>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Start_IT(&htim2); //avvio il timer
 8000be0:	4823      	ldr	r0, [pc, #140]	; (8000c70 <TIM2_IRQHandler+0xac>)
 8000be2:	f001 fef9 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 	  state=2;
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <TIM2_IRQHandler+0xb0>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, "Lampada varia\n\r", 16, 1000);
 8000bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	4921      	ldr	r1, [pc, #132]	; (8000c78 <TIM2_IRQHandler+0xb4>)
 8000bf4:	4821      	ldr	r0, [pc, #132]	; (8000c7c <TIM2_IRQHandler+0xb8>)
 8000bf6:	f002 fb3c 	bl	8003272 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1); //avvio la conversione
 8000bfa:	4821      	ldr	r0, [pc, #132]	; (8000c80 <TIM2_IRQHandler+0xbc>)
 8000bfc:	f000 f9c8 	bl	8000f90 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1000); //attendo il completamento della conversione
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	481e      	ldr	r0, [pc, #120]	; (8000c80 <TIM2_IRQHandler+0xbc>)
 8000c06:	f000 faaa 	bl	800115e <HAL_ADC_PollForConversion>
      uiAnalogData=HAL_ADC_GetValue(&hadc1); //acquisisco il valore convertito
 8000c0a:	481d      	ldr	r0, [pc, #116]	; (8000c80 <TIM2_IRQHandler+0xbc>)
 8000c0c:	f000 fc42 	bl	8001494 <HAL_ADC_GetValue>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <TIM2_IRQHandler+0xc0>)
 8000c14:	6013      	str	r3, [r2, #0]
      HAL_ADC_Stop(&hadc1); //fermo la conversione
 8000c16:	481a      	ldr	r0, [pc, #104]	; (8000c80 <TIM2_IRQHandler+0xbc>)
 8000c18:	f000 fa6e 	bl	80010f8 <HAL_ADC_Stop>
      char bufferTx[50];
      sprintf(bufferTx, "%u\r\n", uiAnalogData); //memorizzo nel buffer il valore ottenuto come stringa.
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <TIM2_IRQHandler+0xc0>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4919      	ldr	r1, [pc, #100]	; (8000c88 <TIM2_IRQHandler+0xc4>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fb1d 	bl	8004264 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*) bufferTx, strlen(bufferTx), 1000); //trasmetto i dati formattati
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	1d39      	adds	r1, r7, #4
 8000c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <TIM2_IRQHandler+0xb8>)
 8000c3e:	f002 fb18 	bl	8003272 <HAL_UART_Transmit>
      HAL_TIM_Base_Start_IT(&htim2); //avvio il timer
	 state=1;
	 HAL_UART_Transmit(&huart2, "Lampada accesa\n\r", 16, 1000);
  	 }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000c42:	e010      	b.n	8000c66 <TIM2_IRQHandler+0xa2>
  else if(state==2){
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <TIM2_IRQHandler+0xb0>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d10c      	bne.n	8000c66 <TIM2_IRQHandler+0xa2>
      HAL_TIM_Base_Start_IT(&htim2); //avvio il timer
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <TIM2_IRQHandler+0xac>)
 8000c4e:	f001 fec3 	bl	80029d8 <HAL_TIM_Base_Start_IT>
	 state=1;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <TIM2_IRQHandler+0xb0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Transmit(&huart2, "Lampada accesa\n\r", 16, 1000);
 8000c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	490b      	ldr	r1, [pc, #44]	; (8000c8c <TIM2_IRQHandler+0xc8>)
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <TIM2_IRQHandler+0xb8>)
 8000c62:	f002 fb06 	bl	8003272 <HAL_UART_Transmit>
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000dc 	.word	0x200000dc
 8000c74:	20000168 	.word	0x20000168
 8000c78:	08004b58 	.word	0x08004b58
 8000c7c:	20000124 	.word	0x20000124
 8000c80:	20000094 	.word	0x20000094
 8000c84:	2000016c 	.word	0x2000016c
 8000c88:	08004b68 	.word	0x08004b68
 8000c8c:	08004b70 	.word	0x08004b70

08000c90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <USART2_IRQHandler+0x10>)
 8000c96:	f002 fb7f 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000124 	.word	0x20000124

08000ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cac:	f001 f988 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <EXTI15_10_IRQHandler+0x44>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f06f 0201 	mvn.w	r2, #1
 8000cb8:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE );
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <EXTI15_10_IRQHandler+0x44>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <EXTI15_10_IRQHandler+0x44>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 0201 	orr.w	r2, r2, #1
 8000cc8:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2); //avvio il timer
 8000cca:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <EXTI15_10_IRQHandler+0x44>)
 8000ccc:	f001 fe84 	bl	80029d8 <HAL_TIM_Base_Start_IT>
  state=1; //modifico lo stato
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <EXTI15_10_IRQHandler+0x48>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, "Lampada accesa\n\r", 16, 1000);
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	2210      	movs	r2, #16
 8000cdc:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <EXTI15_10_IRQHandler+0x4c>)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <EXTI15_10_IRQHandler+0x50>)
 8000ce0:	f002 fac7 	bl	8003272 <HAL_UART_Transmit>

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000dc 	.word	0x200000dc
 8000cec:	20000168 	.word	0x20000168
 8000cf0:	08004b70 	.word	0x08004b70
 8000cf4:	20000124 	.word	0x20000124

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f003 fa6a 	bl	8004200 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20018000 	.word	0x20018000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000170 	.word	0x20000170
 8000d60:	20000188 	.word	0x20000188

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f003 fa29 	bl	800420c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fbeb 	bl	8000594 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dcc:	08004be0 	.word	0x08004be0
  ldr r2, =_sbss
 8000dd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dd4:	20000188 	.word	0x20000188

08000dd8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <DMA1_Stream0_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fe69 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fdba 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fe81 	bl	8001b46 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 fe49 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000174 	.word	0x20000174

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000174 	.word	0x20000174

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e033      	b.n	8000f86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d109      	bne.n	8000f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fd56 	bl	80009d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4e:	f023 0302 	bic.w	r3, r3, #2
 8000f52:	f043 0202 	orr.w	r2, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fbe8 	bl	8001730 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f023 0303 	bic.w	r3, r3, #3
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
 8000f76:	e001      	b.n	8000f7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Start+0x1a>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e097      	b.n	80010da <HAL_ADC_Start+0x14a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d018      	beq.n	8000ff2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_ADC_Start+0x158>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_ADC_Start+0x15c>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9a      	lsrs	r2, r3, #18
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fe4:	e002      	b.n	8000fec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f9      	bne.n	8000fe6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d15f      	bne.n	80010c0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800103e:	d106      	bne.n	800104e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	f023 0206 	bic.w	r2, r3, #6
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	645a      	str	r2, [r3, #68]	; 0x44
 800104c:	e002      	b.n	8001054 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_ADC_Start+0x160>)
 800105e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001068:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10f      	bne.n	8001096 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d129      	bne.n	80010d8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	e020      	b.n	80010d8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <HAL_ADC_Start+0x164>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d11b      	bne.n	80010d8 <HAL_ADC_Start+0x148>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d114      	bne.n	80010d8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	e00b      	b.n	80010d8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f043 0210 	orr.w	r2, r3, #16
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	f043 0201 	orr.w	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	40012300 	.word	0x40012300
 80010f4:	40012000 	.word	0x40012000

080010f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_Stop+0x16>
 800110a:	2302      	movs	r3, #2
 800110c:	e021      	b.n	8001152 <HAL_ADC_Stop+0x5a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117a:	d113      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800118a:	d10b      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f043 0220 	orr.w	r2, r3, #32
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e063      	b.n	800126c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011a4:	f7ff fe80 	bl	8000ea8 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011aa:	e021      	b.n	80011f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b2:	d01d      	beq.n	80011f0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d007      	beq.n	80011ca <HAL_ADC_PollForConversion+0x6c>
 80011ba:	f7ff fe75 	bl	8000ea8 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d212      	bcs.n	80011f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d00b      	beq.n	80011f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f043 0204 	orr.w	r2, r3, #4
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e03d      	b.n	800126c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d1d6      	bne.n	80011ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f06f 0212 	mvn.w	r2, #18
 8001206:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d123      	bne.n	800126a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001226:	2b00      	cmp	r3, #0
 8001228:	d11f      	bne.n	800126a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001242:	2b00      	cmp	r3, #0
 8001244:	d111      	bne.n	800126a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d105      	bne.n	800126a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d049      	beq.n	800133e <HAL_ADC_IRQHandler+0xca>
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d046      	beq.n	800133e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d12b      	bne.n	800132e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d127      	bne.n	800132e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d119      	bne.n	800132e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0220 	bic.w	r2, r2, #32
 8001308:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f8bd 	bl	80014ae <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f06f 0212 	mvn.w	r2, #18
 800133c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d057      	beq.n	8001404 <HAL_ADC_IRQHandler+0x190>
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d054      	beq.n	8001404 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d139      	bne.n	80013f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001398:	2b00      	cmp	r3, #0
 800139a:	d12b      	bne.n	80013f4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d124      	bne.n	80013f4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d11d      	bne.n	80013f4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d119      	bne.n	80013f4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fa97 	bl	8001928 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f06f 020c 	mvn.w	r2, #12
 8001402:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001412:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d017      	beq.n	800144a <HAL_ADC_IRQHandler+0x1d6>
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d014      	beq.n	800144a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b01      	cmp	r3, #1
 800142c:	d10d      	bne.n	800144a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f841 	bl	80014c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f06f 0201 	mvn.w	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001458:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d015      	beq.n	800148c <HAL_ADC_IRQHandler+0x218>
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d012      	beq.n	800148c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f043 0202 	orr.w	r2, r3, #2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f06f 0220 	mvn.w	r2, #32
 800147a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f82a 	bl	80014d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f06f 0220 	mvn.w	r2, #32
 800148a:	601a      	str	r2, [r3, #0]
  }
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1c>
 8001504:	2302      	movs	r3, #2
 8001506:	e105      	b.n	8001714 <HAL_ADC_ConfigChannel+0x228>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b09      	cmp	r3, #9
 8001516:	d925      	bls.n	8001564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68d9      	ldr	r1, [r3, #12]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3b1e      	subs	r3, #30
 800152e:	2207      	movs	r2, #7
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43da      	mvns	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	400a      	ands	r2, r1
 800153c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68d9      	ldr	r1, [r3, #12]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	4603      	mov	r3, r0
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4403      	add	r3, r0
 8001556:	3b1e      	subs	r3, #30
 8001558:	409a      	lsls	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	e022      	b.n	80015aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6919      	ldr	r1, [r3, #16]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	2207      	movs	r2, #7
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6919      	ldr	r1, [r3, #16]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	4603      	mov	r3, r0
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4403      	add	r3, r0
 80015a0:	409a      	lsls	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d824      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b05      	subs	r3, #5
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b05      	subs	r3, #5
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
 80015fa:	e04c      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d824      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b23      	subs	r3, #35	; 0x23
 8001616:	221f      	movs	r2, #31
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43da      	mvns	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b23      	subs	r3, #35	; 0x23
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
 800164c:	e023      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b41      	subs	r3, #65	; 0x41
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b41      	subs	r3, #65	; 0x41
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_ADC_ConfigChannel+0x234>)
 8001698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a21      	ldr	r2, [pc, #132]	; (8001724 <HAL_ADC_ConfigChannel+0x238>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d109      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1cc>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d105      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_ADC_ConfigChannel+0x238>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d123      	bne.n	800170a <HAL_ADC_ConfigChannel+0x21e>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x1e6>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b11      	cmp	r3, #17
 80016d0:	d11b      	bne.n	800170a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d111      	bne.n	800170a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_ADC_ConfigChannel+0x23c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_ADC_ConfigChannel+0x240>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9a      	lsrs	r2, r3, #18
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3b01      	subs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40012300 	.word	0x40012300
 8001724:	40012000 	.word	0x40012000
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001738:	4b79      	ldr	r3, [pc, #484]	; (8001920 <ADC_Init+0x1f0>)
 800173a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	431a      	orrs	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	021a      	lsls	r2, r3, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	4a58      	ldr	r2, [pc, #352]	; (8001924 <ADC_Init+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	e00f      	b.n	800182e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800181c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800182c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0202 	bic.w	r2, r2, #2
 800183c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6899      	ldr	r1, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7e1b      	ldrb	r3, [r3, #24]
 8001848:	005a      	lsls	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01b      	beq.n	8001894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800187a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	3b01      	subs	r3, #1
 8001888:	035a      	lsls	r2, r3, #13
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	e007      	b.n	80018a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	3b01      	subs	r3, #1
 80018c0:	051a      	lsls	r2, r3, #20
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018e6:	025a      	lsls	r2, r3, #9
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6899      	ldr	r1, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	029a      	lsls	r2, r3, #10
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40012300 	.word	0x40012300
 8001924:	0f000001 	.word	0x0f000001

08001928 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff f99c 	bl	8000ea8 <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d008      	beq.n	8001b90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e052      	b.n	8001c36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0216 	bic.w	r2, r2, #22
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d103      	bne.n	8001bc0 <HAL_DMA_Abort+0x62>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0208 	bic.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be0:	e013      	b.n	8001c0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be2:	f7ff f961 	bl	8000ea8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d90c      	bls.n	8001c0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e015      	b.n	8001c36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e4      	bne.n	8001be2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00c      	b.n	8001c76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2205      	movs	r2, #5
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e159      	b.n	8001f54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	f040 8148 	bne.w	8001f4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d005      	beq.n	8001cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d130      	bne.n	8001d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 0201 	and.w	r2, r3, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d017      	beq.n	8001d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80a2 	beq.w	8001f4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e26:	4a52      	ldr	r2, [pc, #328]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x202>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_GPIO_Init+0x2f4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x1fe>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <HAL_GPIO_Init+0x2f8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x1f6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a45      	ldr	r2, [pc, #276]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x1f2>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e008      	b.n	8001e88 <HAL_GPIO_Init+0x204>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x204>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e004      	b.n	8001e88 <HAL_GPIO_Init+0x204>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_Init+0x204>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_GPIO_Init+0x204>
 8001e86:	2300      	movs	r3, #0
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f002 0203 	and.w	r2, r2, #3
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	4093      	lsls	r3, r2
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e98:	4935      	ldr	r1, [pc, #212]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eca:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef4:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1e:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	f67f aea2 	bls.w	8001ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f806 	bl	8001ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40013c00 	.word	0x40013c00

08001ff0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e267      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d075      	beq.n	8002112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b04      	cmp	r3, #4
 8002030:	d00c      	beq.n	800204c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b85      	ldr	r3, [pc, #532]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203a:	2b08      	cmp	r3, #8
 800203c:	d112      	bne.n	8002064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203e:	4b82      	ldr	r3, [pc, #520]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204a:	d10b      	bne.n	8002064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	4b7e      	ldr	r3, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d05b      	beq.n	8002110 <HAL_RCC_OscConfig+0x108>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d157      	bne.n	8002110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e242      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d106      	bne.n	800207c <HAL_RCC_OscConfig+0x74>
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0xb0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b70      	ldr	r3, [pc, #448]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6f      	ldr	r2, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b6d      	ldr	r3, [pc, #436]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6c      	ldr	r2, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0xb0>
 80020a0:	4b69      	ldr	r3, [pc, #420]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a68      	ldr	r2, [pc, #416]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fef2 	bl	8000ea8 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c8:	f7fe feee 	bl	8000ea8 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e207      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xc0>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fede 	bl	8000ea8 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe feda 	bl	8000ea8 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1f3      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	4b51      	ldr	r3, [pc, #324]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0xe8>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d063      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d11c      	bne.n	8002170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_RCC_OscConfig+0x152>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e1c7      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	e03a      	b.n	80021e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_OscConfig+0x244>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe fe93 	bl	8000ea8 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7fe fe8f 	bl	8000ea8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1a8      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4925      	ldr	r1, [pc, #148]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x244>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fe72 	bl	8000ea8 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe fe6e 	bl	8000ea8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e187      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d036      	beq.n	8002260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x248>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe fe52 	bl	8000ea8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002208:	f7fe fe4e 	bl	8000ea8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e167      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800221c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x200>
 8002226:	e01b      	b.n	8002260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x248>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7fe fe3b 	bl	8000ea8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	e00e      	b.n	8002254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe fe37 	bl	8000ea8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d907      	bls.n	8002254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e150      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
 8002248:	40023800 	.word	0x40023800
 800224c:	42470000 	.word	0x42470000
 8002250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b88      	ldr	r3, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ea      	bne.n	8002236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8097 	beq.w	800239c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b81      	ldr	r3, [pc, #516]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b7d      	ldr	r3, [pc, #500]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a7c      	ldr	r2, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b77      	ldr	r3, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a73      	ldr	r2, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fdf7 	bl	8000ea8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7fe fdf3 	bl	8000ea8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e10c      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2ea>
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x324>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x30c>
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x324>
 8002314:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b55      	ldr	r3, [pc, #340]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a54      	ldr	r2, [pc, #336]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fdb8 	bl	8000ea8 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fdb4 	bl	8000ea8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0cb      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ee      	beq.n	800233c <HAL_RCC_OscConfig+0x334>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002360:	f7fe fda2 	bl	8000ea8 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fd9e 	bl	8000ea8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0b5      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ee      	bne.n	8002368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	4a38      	ldr	r2, [pc, #224]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a1 	beq.w	80024e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d05c      	beq.n	800246c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d141      	bne.n	800243e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fd72 	bl	8000ea8 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fd6e 	bl	8000ea8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e087      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	3b01      	subs	r3, #1
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	491b      	ldr	r1, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fd47 	bl	8000ea8 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fd43 	bl	8000ea8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e05c      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x416>
 800243c:	e054      	b.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fd30 	bl	8000ea8 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fd2c 	bl	8000ea8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e045      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e038      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
 8002480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x4ec>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d028      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d121      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d11a      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024bc:	4293      	cmp	r3, r2
 80024be:	d111      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0cc      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d90c      	bls.n	8002534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800256e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d044      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d119      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e067      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4934      	ldr	r1, [pc, #208]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fc5e 	bl	8000ea8 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fc5a 	bl	8000ea8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e04f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d20c      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f821 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fbbe 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08004b84 	.word	0x08004b84
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b094      	sub	sp, #80	; 0x50
 80026ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
 80026d0:	2300      	movs	r3, #0
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026dc:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d00d      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x40>
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	f200 80e1 	bhi.w	80028b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x34>
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x3a>
 80026f6:	e0db      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026fc:	e0db      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026fe:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002702:	e0d8      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800270e:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	2200      	movs	r2, #0
 8002722:	63bb      	str	r3, [r7, #56]	; 0x38
 8002724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
 8002732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002736:	4622      	mov	r2, r4
 8002738:	462b      	mov	r3, r5
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	0159      	lsls	r1, r3, #5
 8002744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002748:	0150      	lsls	r0, r2, #5
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4621      	mov	r1, r4
 8002750:	1a51      	subs	r1, r2, r1
 8002752:	6139      	str	r1, [r7, #16]
 8002754:	4629      	mov	r1, r5
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002768:	4659      	mov	r1, fp
 800276a:	018b      	lsls	r3, r1, #6
 800276c:	4651      	mov	r1, sl
 800276e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002772:	4651      	mov	r1, sl
 8002774:	018a      	lsls	r2, r1, #6
 8002776:	4651      	mov	r1, sl
 8002778:	ebb2 0801 	subs.w	r8, r2, r1
 800277c:	4659      	mov	r1, fp
 800277e:	eb63 0901 	sbc.w	r9, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	4623      	mov	r3, r4
 800279c:	eb18 0303 	adds.w	r3, r8, r3
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	462b      	mov	r3, r5
 80027a4:	eb49 0303 	adc.w	r3, r9, r3
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027b6:	4629      	mov	r1, r5
 80027b8:	024b      	lsls	r3, r1, #9
 80027ba:	4621      	mov	r1, r4
 80027bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c0:	4621      	mov	r1, r4
 80027c2:	024a      	lsls	r2, r1, #9
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ca:	2200      	movs	r2, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d4:	f7fd fd5c 	bl	8000290 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e0:	e058      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	2200      	movs	r2, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	4611      	mov	r1, r2
 80027ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	f04f 0000 	mov.w	r0, #0
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	0159      	lsls	r1, r3, #5
 800280a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280e:	0150      	lsls	r0, r2, #5
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4641      	mov	r1, r8
 8002816:	ebb2 0a01 	subs.w	sl, r2, r1
 800281a:	4649      	mov	r1, r9
 800281c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800282c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002834:	ebb2 040a 	subs.w	r4, r2, sl
 8002838:	eb63 050b 	sbc.w	r5, r3, fp
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	00eb      	lsls	r3, r5, #3
 8002846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284a:	00e2      	lsls	r2, r4, #3
 800284c:	4614      	mov	r4, r2
 800284e:	461d      	mov	r5, r3
 8002850:	4643      	mov	r3, r8
 8002852:	18e3      	adds	r3, r4, r3
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	464b      	mov	r3, r9
 8002858:	eb45 0303 	adc.w	r3, r5, r3
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286a:	4629      	mov	r1, r5
 800286c:	028b      	lsls	r3, r1, #10
 800286e:	4621      	mov	r1, r4
 8002870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002874:	4621      	mov	r1, r4
 8002876:	028a      	lsls	r2, r1, #10
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287e:	2200      	movs	r2, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	61fa      	str	r2, [r7, #28]
 8002884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002888:	f7fd fd02 	bl	8000290 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3750      	adds	r7, #80	; 0x50
 80028bc:	46bd      	mov	sp, r7
 80028be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	007a1200 	.word	0x007a1200

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000000 	.word	0x20000000

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	08004b94 	.word	0x08004b94

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffdc 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	08004b94 	.word	0x08004b94

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e041      	b.n	80029ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe f886 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fa92 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e044      	b.n	8002a7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d013      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_TIM_Base_Start_IT+0xb4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d010      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a66:	e007      	b.n	8002a78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800
 8002a94:	40000c00 	.word	0x40000c00
 8002a98:	40014000 	.word	0x40014000

08002a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0202 	mvn.w	r2, #2
 8002ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9bf 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9b1 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f9c2 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0204 	mvn.w	r2, #4
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f995 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f987 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f998 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0208 	mvn.w	r2, #8
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f96b 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f95d 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f96e 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0210 	mvn.w	r2, #16
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f941 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f933 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f944 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0201 	mvn.w	r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f90d 	bl	8002e3a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fabc 	bl	80031c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f909 	bl	8002e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0220 	mvn.w	r2, #32
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa86 	bl	80031b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0b4      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x186>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	d03e      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0xd4>
 8002d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d06:	f200 8087 	bhi.w	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	f000 8086 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x172>
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d16:	d87f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b70      	cmp	r3, #112	; 0x70
 8002d1a:	d01a      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0xa6>
 8002d1c:	2b70      	cmp	r3, #112	; 0x70
 8002d1e:	d87b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b60      	cmp	r3, #96	; 0x60
 8002d22:	d050      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d24:	2b60      	cmp	r3, #96	; 0x60
 8002d26:	d877      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b50      	cmp	r3, #80	; 0x50
 8002d2a:	d03c      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d2c:	2b50      	cmp	r3, #80	; 0x50
 8002d2e:	d873      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d058      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d86f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b30      	cmp	r3, #48	; 0x30
 8002d3a:	d064      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b30      	cmp	r3, #48	; 0x30
 8002d3e:	d86b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d060      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d867      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d05a      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d50:	e062      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f000 f997 	bl	8003094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	609a      	str	r2, [r3, #8]
      break;
 8002d7e:	e04f      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f000 f980 	bl	8003094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da2:	609a      	str	r2, [r3, #8]
      break;
 8002da4:	e03c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f8f4 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2150      	movs	r1, #80	; 0x50
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f94d 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e02c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 f913 	bl	8002ffe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2160      	movs	r1, #96	; 0x60
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f93d 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002de4:	e01c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f8d4 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2140      	movs	r1, #64	; 0x40
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f92d 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002e04:	e00c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f000 f924 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002e16:	e003      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e000      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <TIM_Base_SetConfig+0xe8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a30      	ldr	r2, [pc, #192]	; (8002f8c <TIM_Base_SetConfig+0xec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d017      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <TIM_Base_SetConfig+0xe8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <TIM_Base_SetConfig+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <TIM_Base_SetConfig+0xf4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <TIM_Base_SetConfig+0xf8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <TIM_Base_SetConfig+0xfc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d103      	bne.n	8002f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	615a      	str	r2, [r3, #20]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800

08002fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0201 	bic.w	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 030a 	bic.w	r3, r3, #10
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0210 	bic.w	r2, r3, #16
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	031b      	lsls	r3, r3, #12
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800303a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	f043 0307 	orr.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	021a      	lsls	r2, r3, #8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e050      	b.n	800318e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d018      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d013      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10c      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4313      	orrs	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40014000 	.word	0x40014000

080031b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e03f      	b.n	800326a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fc5c 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fd7b 	bl	8003d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	; 0x28
 8003276:	af02      	add	r7, sp, #8
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d17c      	bne.n	800338c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_UART_Transmit+0x2c>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e075      	b.n	800338e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x3e>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e06e      	b.n	800338e <HAL_UART_Transmit+0x11c>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c6:	f7fd fdef 	bl	8000ea8 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d108      	bne.n	80032f4 <HAL_UART_Transmit+0x82>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	e003      	b.n	80032fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003304:	e02a      	b.n	800335c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 faf9 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e036      	b.n	800338e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3302      	adds	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	e007      	b.n	800334e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	3301      	adds	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1cf      	bne.n	8003306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fac9 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e006      	b.n	800338e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b0ba      	sub	sp, #232	; 0xe8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fbd3 	bl	8003ba2 <UART_Receive_IT>
      return;
 80033fc:	e256      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80de 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
 8003408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003418:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80d1 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 81ed 	beq.w	80038a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb5e 	bl	8003ba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_UART_IRQHandler+0x17a>
 800350a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04f      	beq.n	80035b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa66 	bl	80039e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d141      	bne.n	80035aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800353c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3314      	adds	r3, #20
 800354e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800355e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800356a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1d9      	bne.n	8003526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d013      	beq.n	80035a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4a7d      	ldr	r2, [pc, #500]	; (8003774 <HAL_UART_IRQHandler+0x3dc>)
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fb59 	bl	8001c3e <HAL_DMA_Abort_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	e00e      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f99a 	bl	80038dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f996 	bl	80038dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e006      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f992 	bl	80038dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035be:	e170      	b.n	80038a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	bf00      	nop
    return;
 80035c2:	e16e      	b.n	80038a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 814a 	bne.w	8003862 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8143 	beq.w	8003862 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 813c 	beq.w	8003862 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	f040 80b4 	bne.w	8003778 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800361c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8140 	beq.w	80038a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362e:	429a      	cmp	r2, r3
 8003630:	f080 8139 	bcs.w	80038a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800363a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	f000 8088 	beq.w	800375a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1d9      	bne.n	800364a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e1      	bne.n	8003696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3314      	adds	r3, #20
 80036f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e3      	bne.n	80036d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	f023 0310 	bic.w	r3, r3, #16
 800372e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800373c:	65ba      	str	r2, [r7, #88]	; 0x58
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e3      	bne.n	8003718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fa02 	bl	8001b5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003762:	b29b      	uxth	r3, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	b29b      	uxth	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8c0 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003770:	e099      	b.n	80038a6 <HAL_UART_IRQHandler+0x50e>
 8003772:	bf00      	nop
 8003774:	08003aab 	.word	0x08003aab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 808b 	beq.w	80038aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8086 	beq.w	80038aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037c2:	647a      	str	r2, [r7, #68]	; 0x44
 80037c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e3      	bne.n	800379e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	623b      	str	r3, [r7, #32]
   return(result);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037fa:	633a      	str	r2, [r7, #48]	; 0x30
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e3      	bne.n	80037d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	60fb      	str	r3, [r7, #12]
   return(result);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0310 	bic.w	r3, r3, #16
 8003832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003840:	61fa      	str	r2, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	617b      	str	r3, [r7, #20]
   return(result);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e3      	bne.n	800381c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f848 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003860:	e023      	b.n	80038aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_UART_IRQHandler+0x4ea>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f929 	bl	8003ad2 <UART_Transmit_IT>
    return;
 8003880:	e014      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <HAL_UART_IRQHandler+0x514>
 800388e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f969 	bl	8003b72 <UART_EndTransmit_IT>
    return;
 80038a0:	e004      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
    return;
 80038a2:	bf00      	nop
 80038a4:	e002      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
      return;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
      return;
 80038aa:	bf00      	nop
  }
}
 80038ac:	37e8      	adds	r7, #232	; 0xe8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop

080038b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b090      	sub	sp, #64	; 0x40
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003918:	e050      	b.n	80039bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d04c      	beq.n	80039bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x30>
 8003928:	f7fd fabe 	bl	8000ea8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003934:	429a      	cmp	r2, r3
 8003936:	d241      	bcs.n	80039bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003958:	637a      	str	r2, [r7, #52]	; 0x34
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800395e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	613b      	str	r3, [r7, #16]
   return(result);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3314      	adds	r3, #20
 800398a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800398c:	623a      	str	r2, [r7, #32]
 800398e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	69f9      	ldr	r1, [r7, #28]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	61bb      	str	r3, [r7, #24]
   return(result);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e5      	bne.n	800396c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e00f      	b.n	80039dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d09f      	beq.n	800391a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3740      	adds	r7, #64	; 0x40
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b095      	sub	sp, #84	; 0x54
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a0c:	643a      	str	r2, [r7, #64]	; 0x40
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e5      	bne.n	80039ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3314      	adds	r3, #20
 8003a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e5      	bne.n	8003a20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d119      	bne.n	8003a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	647b      	str	r3, [r7, #68]	; 0x44
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a7c:	61ba      	str	r2, [r7, #24]
 8003a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6979      	ldr	r1, [r7, #20]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a9e:	bf00      	nop
 8003aa0:	3754      	adds	r7, #84	; 0x54
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff ff09 	bl	80038dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b21      	cmp	r3, #33	; 0x21
 8003ae4:	d13e      	bne.n	8003b64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	d114      	bne.n	8003b1a <UART_Transmit_IT+0x48>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d110      	bne.n	8003b1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	1c9a      	adds	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	621a      	str	r2, [r3, #32]
 8003b18:	e008      	b.n	8003b2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	1c59      	adds	r1, r3, #1
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6211      	str	r1, [r2, #32]
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10f      	bne.n	8003b60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fe8e 	bl	80038b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b08c      	sub	sp, #48	; 0x30
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b22      	cmp	r3, #34	; 0x22
 8003bb4:	f040 80ab 	bne.w	8003d0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc0:	d117      	bne.n	8003bf2 <UART_Receive_IT+0x50>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d113      	bne.n	8003bf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf0:	e026      	b.n	8003c40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d007      	beq.n	8003c16 <UART_Receive_IT+0x74>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <UART_Receive_IT+0x82>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e008      	b.n	8003c36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d15a      	bne.n	8003d0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0220 	bic.w	r2, r2, #32
 8003c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d135      	bne.n	8003d00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f023 0310 	bic.w	r3, r3, #16
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	623a      	str	r2, [r7, #32]
 8003cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	69f9      	ldr	r1, [r7, #28]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d10a      	bne.n	8003cf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fdf9 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
 8003cfe:	e002      	b.n	8003d06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fde1 	bl	80038c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e002      	b.n	8003d10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3730      	adds	r7, #48	; 0x30
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b0c0      	sub	sp, #256	; 0x100
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	ea40 0301 	orr.w	r3, r0, r1
 8003d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d70:	f021 010c 	bic.w	r1, r1, #12
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d92:	6999      	ldr	r1, [r3, #24]
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	ea40 0301 	orr.w	r3, r0, r1
 8003d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8f      	ldr	r3, [pc, #572]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d005      	beq.n	8003db8 <UART_SetConfig+0xa0>
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b8d      	ldr	r3, [pc, #564]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d104      	bne.n	8003dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe fdaa 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8003dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dc0:	e003      	b.n	8003dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc2:	f7fe fd91 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8003dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	f040 810c 	bne.w	8003ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003de2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003df2:	415b      	adcs	r3, r3
 8003df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	eb12 0801 	adds.w	r8, r2, r1
 8003e00:	4629      	mov	r1, r5
 8003e02:	eb43 0901 	adc.w	r9, r3, r1
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e1a:	4690      	mov	r8, r2
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	eb18 0303 	adds.w	r3, r8, r3
 8003e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e28:	462b      	mov	r3, r5
 8003e2a:	eb49 0303 	adc.w	r3, r9, r3
 8003e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e46:	460b      	mov	r3, r1
 8003e48:	18db      	adds	r3, r3, r3
 8003e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	eb42 0303 	adc.w	r3, r2, r3
 8003e52:	657b      	str	r3, [r7, #84]	; 0x54
 8003e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e5c:	f7fc fa18 	bl	8000290 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b61      	ldr	r3, [pc, #388]	; (8003fec <UART_SetConfig+0x2d4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e90:	4641      	mov	r1, r8
 8003e92:	eb12 0a01 	adds.w	sl, r2, r1
 8003e96:	4649      	mov	r1, r9
 8003e98:	eb43 0b01 	adc.w	fp, r3, r1
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb0:	4692      	mov	sl, r2
 8003eb2:	469b      	mov	fp, r3
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003edc:	460b      	mov	r3, r1
 8003ede:	18db      	adds	r3, r3, r3
 8003ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ef2:	f7fc f9cd 	bl	8000290 <__aeabi_uldivmod>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <UART_SetConfig+0x2d4>)
 8003efe:	fba3 2301 	umull	r2, r3, r3, r1
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2264      	movs	r2, #100	; 0x64
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <UART_SetConfig+0x2d4>)
 8003f14:	fba3 2302 	umull	r2, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f20:	441c      	add	r4, r3
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6339      	str	r1, [r7, #48]	; 0x30
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f98:	460b      	mov	r3, r1
 8003f9a:	18db      	adds	r3, r3, r3
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	eb42 0303 	adc.w	r3, r2, r3
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fae:	f7fc f96f 	bl	8000290 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <UART_SetConfig+0x2d4>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	; 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	; 0x32
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <UART_SetConfig+0x2d4>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4422      	add	r2, r4
 8003fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe0:	e105      	b.n	80041ee <UART_SetConfig+0x4d6>
 8003fe2:	bf00      	nop
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40011400 	.word	0x40011400
 8003fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	1891      	adds	r1, r2, r2
 8004008:	6239      	str	r1, [r7, #32]
 800400a:	415b      	adcs	r3, r3
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004012:	4641      	mov	r1, r8
 8004014:	1854      	adds	r4, r2, r1
 8004016:	4649      	mov	r1, r9
 8004018:	eb43 0501 	adc.w	r5, r3, r1
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	00eb      	lsls	r3, r5, #3
 8004026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402a:	00e2      	lsls	r2, r4, #3
 800402c:	4614      	mov	r4, r2
 800402e:	461d      	mov	r5, r3
 8004030:	4643      	mov	r3, r8
 8004032:	18e3      	adds	r3, r4, r3
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004038:	464b      	mov	r3, r9
 800403a:	eb45 0303 	adc.w	r3, r5, r3
 800403e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800404e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800405e:	4629      	mov	r1, r5
 8004060:	008b      	lsls	r3, r1, #2
 8004062:	4621      	mov	r1, r4
 8004064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004068:	4621      	mov	r1, r4
 800406a:	008a      	lsls	r2, r1, #2
 800406c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004070:	f7fc f90e 	bl	8000290 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b60      	ldr	r3, [pc, #384]	; (80041fc <UART_SetConfig+0x4e4>)
 800407a:	fba3 2302 	umull	r2, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	011c      	lsls	r4, r3, #4
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800408c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	61b9      	str	r1, [r7, #24]
 800409c:	415b      	adcs	r3, r3
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6139      	str	r1, [r7, #16]
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040fc:	4649      	mov	r1, r9
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	4641      	mov	r1, r8
 8004102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004106:	4641      	mov	r1, r8
 8004108:	008a      	lsls	r2, r1, #2
 800410a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800410e:	f7fc f8bf 	bl	8000290 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <UART_SetConfig+0x4e4>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	; 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	3332      	adds	r3, #50	; 0x32
 800412a:	4a34      	ldr	r2, [pc, #208]	; (80041fc <UART_SetConfig+0x4e4>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004136:	441c      	add	r4, r3
 8004138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413c:	2200      	movs	r2, #0
 800413e:	673b      	str	r3, [r7, #112]	; 0x70
 8004140:	677a      	str	r2, [r7, #116]	; 0x74
 8004142:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004146:	4642      	mov	r2, r8
 8004148:	464b      	mov	r3, r9
 800414a:	1891      	adds	r1, r2, r2
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	415b      	adcs	r3, r3
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004156:	4641      	mov	r1, r8
 8004158:	1851      	adds	r1, r2, r1
 800415a:	6039      	str	r1, [r7, #0]
 800415c:	4649      	mov	r1, r9
 800415e:	414b      	adcs	r3, r1
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800416e:	4659      	mov	r1, fp
 8004170:	00cb      	lsls	r3, r1, #3
 8004172:	4651      	mov	r1, sl
 8004174:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004178:	4651      	mov	r1, sl
 800417a:	00ca      	lsls	r2, r1, #3
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	4603      	mov	r3, r0
 8004182:	4642      	mov	r2, r8
 8004184:	189b      	adds	r3, r3, r2
 8004186:	66bb      	str	r3, [r7, #104]	; 0x68
 8004188:	464b      	mov	r3, r9
 800418a:	460a      	mov	r2, r1
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	663b      	str	r3, [r7, #96]	; 0x60
 800419c:	667a      	str	r2, [r7, #100]	; 0x64
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041aa:	4649      	mov	r1, r9
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	4641      	mov	r1, r8
 80041b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b4:	4641      	mov	r1, r8
 80041b6:	008a      	lsls	r2, r1, #2
 80041b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041bc:	f7fc f868 	bl	8000290 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <UART_SetConfig+0x4e4>)
 80041c6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2164      	movs	r1, #100	; 0x64
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a08      	ldr	r2, [pc, #32]	; (80041fc <UART_SetConfig+0x4e4>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4422      	add	r2, r4
 80041ec:	609a      	str	r2, [r3, #8]
}
 80041ee:	bf00      	nop
 80041f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fa:	bf00      	nop
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <__errno>:
 8004200:	4b01      	ldr	r3, [pc, #4]	; (8004208 <__errno+0x8>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	2000000c 	.word	0x2000000c

0800420c <__libc_init_array>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4d0d      	ldr	r5, [pc, #52]	; (8004244 <__libc_init_array+0x38>)
 8004210:	4c0d      	ldr	r4, [pc, #52]	; (8004248 <__libc_init_array+0x3c>)
 8004212:	1b64      	subs	r4, r4, r5
 8004214:	10a4      	asrs	r4, r4, #2
 8004216:	2600      	movs	r6, #0
 8004218:	42a6      	cmp	r6, r4
 800421a:	d109      	bne.n	8004230 <__libc_init_array+0x24>
 800421c:	4d0b      	ldr	r5, [pc, #44]	; (800424c <__libc_init_array+0x40>)
 800421e:	4c0c      	ldr	r4, [pc, #48]	; (8004250 <__libc_init_array+0x44>)
 8004220:	f000 fc8e 	bl	8004b40 <_init>
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	2600      	movs	r6, #0
 800422a:	42a6      	cmp	r6, r4
 800422c:	d105      	bne.n	800423a <__libc_init_array+0x2e>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	f855 3b04 	ldr.w	r3, [r5], #4
 8004234:	4798      	blx	r3
 8004236:	3601      	adds	r6, #1
 8004238:	e7ee      	b.n	8004218 <__libc_init_array+0xc>
 800423a:	f855 3b04 	ldr.w	r3, [r5], #4
 800423e:	4798      	blx	r3
 8004240:	3601      	adds	r6, #1
 8004242:	e7f2      	b.n	800422a <__libc_init_array+0x1e>
 8004244:	08004bd8 	.word	0x08004bd8
 8004248:	08004bd8 	.word	0x08004bd8
 800424c:	08004bd8 	.word	0x08004bd8
 8004250:	08004bdc 	.word	0x08004bdc

08004254 <memset>:
 8004254:	4402      	add	r2, r0
 8004256:	4603      	mov	r3, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <siprintf>:
 8004264:	b40e      	push	{r1, r2, r3}
 8004266:	b500      	push	{lr}
 8004268:	b09c      	sub	sp, #112	; 0x70
 800426a:	ab1d      	add	r3, sp, #116	; 0x74
 800426c:	9002      	str	r0, [sp, #8]
 800426e:	9006      	str	r0, [sp, #24]
 8004270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004274:	4809      	ldr	r0, [pc, #36]	; (800429c <siprintf+0x38>)
 8004276:	9107      	str	r1, [sp, #28]
 8004278:	9104      	str	r1, [sp, #16]
 800427a:	4909      	ldr	r1, [pc, #36]	; (80042a0 <siprintf+0x3c>)
 800427c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004280:	9105      	str	r1, [sp, #20]
 8004282:	6800      	ldr	r0, [r0, #0]
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	a902      	add	r1, sp, #8
 8004288:	f000 f868 	bl	800435c <_svfiprintf_r>
 800428c:	9b02      	ldr	r3, [sp, #8]
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	b01c      	add	sp, #112	; 0x70
 8004294:	f85d eb04 	ldr.w	lr, [sp], #4
 8004298:	b003      	add	sp, #12
 800429a:	4770      	bx	lr
 800429c:	2000000c 	.word	0x2000000c
 80042a0:	ffff0208 	.word	0xffff0208

080042a4 <__ssputs_r>:
 80042a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	688e      	ldr	r6, [r1, #8]
 80042aa:	429e      	cmp	r6, r3
 80042ac:	4682      	mov	sl, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4690      	mov	r8, r2
 80042b2:	461f      	mov	r7, r3
 80042b4:	d838      	bhi.n	8004328 <__ssputs_r+0x84>
 80042b6:	898a      	ldrh	r2, [r1, #12]
 80042b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042bc:	d032      	beq.n	8004324 <__ssputs_r+0x80>
 80042be:	6825      	ldr	r5, [r4, #0]
 80042c0:	6909      	ldr	r1, [r1, #16]
 80042c2:	eba5 0901 	sub.w	r9, r5, r1
 80042c6:	6965      	ldr	r5, [r4, #20]
 80042c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042d0:	3301      	adds	r3, #1
 80042d2:	444b      	add	r3, r9
 80042d4:	106d      	asrs	r5, r5, #1
 80042d6:	429d      	cmp	r5, r3
 80042d8:	bf38      	it	cc
 80042da:	461d      	movcc	r5, r3
 80042dc:	0553      	lsls	r3, r2, #21
 80042de:	d531      	bpl.n	8004344 <__ssputs_r+0xa0>
 80042e0:	4629      	mov	r1, r5
 80042e2:	f000 fb63 	bl	80049ac <_malloc_r>
 80042e6:	4606      	mov	r6, r0
 80042e8:	b950      	cbnz	r0, 8004300 <__ssputs_r+0x5c>
 80042ea:	230c      	movs	r3, #12
 80042ec:	f8ca 3000 	str.w	r3, [sl]
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	6921      	ldr	r1, [r4, #16]
 8004302:	464a      	mov	r2, r9
 8004304:	f000 fabe 	bl	8004884 <memcpy>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004312:	81a3      	strh	r3, [r4, #12]
 8004314:	6126      	str	r6, [r4, #16]
 8004316:	6165      	str	r5, [r4, #20]
 8004318:	444e      	add	r6, r9
 800431a:	eba5 0509 	sub.w	r5, r5, r9
 800431e:	6026      	str	r6, [r4, #0]
 8004320:	60a5      	str	r5, [r4, #8]
 8004322:	463e      	mov	r6, r7
 8004324:	42be      	cmp	r6, r7
 8004326:	d900      	bls.n	800432a <__ssputs_r+0x86>
 8004328:	463e      	mov	r6, r7
 800432a:	6820      	ldr	r0, [r4, #0]
 800432c:	4632      	mov	r2, r6
 800432e:	4641      	mov	r1, r8
 8004330:	f000 fab6 	bl	80048a0 <memmove>
 8004334:	68a3      	ldr	r3, [r4, #8]
 8004336:	1b9b      	subs	r3, r3, r6
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	4433      	add	r3, r6
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	2000      	movs	r0, #0
 8004342:	e7db      	b.n	80042fc <__ssputs_r+0x58>
 8004344:	462a      	mov	r2, r5
 8004346:	f000 fba5 	bl	8004a94 <_realloc_r>
 800434a:	4606      	mov	r6, r0
 800434c:	2800      	cmp	r0, #0
 800434e:	d1e1      	bne.n	8004314 <__ssputs_r+0x70>
 8004350:	6921      	ldr	r1, [r4, #16]
 8004352:	4650      	mov	r0, sl
 8004354:	f000 fabe 	bl	80048d4 <_free_r>
 8004358:	e7c7      	b.n	80042ea <__ssputs_r+0x46>
	...

0800435c <_svfiprintf_r>:
 800435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004360:	4698      	mov	r8, r3
 8004362:	898b      	ldrh	r3, [r1, #12]
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	b09d      	sub	sp, #116	; 0x74
 8004368:	4607      	mov	r7, r0
 800436a:	460d      	mov	r5, r1
 800436c:	4614      	mov	r4, r2
 800436e:	d50e      	bpl.n	800438e <_svfiprintf_r+0x32>
 8004370:	690b      	ldr	r3, [r1, #16]
 8004372:	b963      	cbnz	r3, 800438e <_svfiprintf_r+0x32>
 8004374:	2140      	movs	r1, #64	; 0x40
 8004376:	f000 fb19 	bl	80049ac <_malloc_r>
 800437a:	6028      	str	r0, [r5, #0]
 800437c:	6128      	str	r0, [r5, #16]
 800437e:	b920      	cbnz	r0, 800438a <_svfiprintf_r+0x2e>
 8004380:	230c      	movs	r3, #12
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	e0d1      	b.n	800452e <_svfiprintf_r+0x1d2>
 800438a:	2340      	movs	r3, #64	; 0x40
 800438c:	616b      	str	r3, [r5, #20]
 800438e:	2300      	movs	r3, #0
 8004390:	9309      	str	r3, [sp, #36]	; 0x24
 8004392:	2320      	movs	r3, #32
 8004394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004398:	f8cd 800c 	str.w	r8, [sp, #12]
 800439c:	2330      	movs	r3, #48	; 0x30
 800439e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004548 <_svfiprintf_r+0x1ec>
 80043a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043a6:	f04f 0901 	mov.w	r9, #1
 80043aa:	4623      	mov	r3, r4
 80043ac:	469a      	mov	sl, r3
 80043ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b2:	b10a      	cbz	r2, 80043b8 <_svfiprintf_r+0x5c>
 80043b4:	2a25      	cmp	r2, #37	; 0x25
 80043b6:	d1f9      	bne.n	80043ac <_svfiprintf_r+0x50>
 80043b8:	ebba 0b04 	subs.w	fp, sl, r4
 80043bc:	d00b      	beq.n	80043d6 <_svfiprintf_r+0x7a>
 80043be:	465b      	mov	r3, fp
 80043c0:	4622      	mov	r2, r4
 80043c2:	4629      	mov	r1, r5
 80043c4:	4638      	mov	r0, r7
 80043c6:	f7ff ff6d 	bl	80042a4 <__ssputs_r>
 80043ca:	3001      	adds	r0, #1
 80043cc:	f000 80aa 	beq.w	8004524 <_svfiprintf_r+0x1c8>
 80043d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d2:	445a      	add	r2, fp
 80043d4:	9209      	str	r2, [sp, #36]	; 0x24
 80043d6:	f89a 3000 	ldrb.w	r3, [sl]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80a2 	beq.w	8004524 <_svfiprintf_r+0x1c8>
 80043e0:	2300      	movs	r3, #0
 80043e2:	f04f 32ff 	mov.w	r2, #4294967295
 80043e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ea:	f10a 0a01 	add.w	sl, sl, #1
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	9307      	str	r3, [sp, #28]
 80043f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043f6:	931a      	str	r3, [sp, #104]	; 0x68
 80043f8:	4654      	mov	r4, sl
 80043fa:	2205      	movs	r2, #5
 80043fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004400:	4851      	ldr	r0, [pc, #324]	; (8004548 <_svfiprintf_r+0x1ec>)
 8004402:	f7fb fef5 	bl	80001f0 <memchr>
 8004406:	9a04      	ldr	r2, [sp, #16]
 8004408:	b9d8      	cbnz	r0, 8004442 <_svfiprintf_r+0xe6>
 800440a:	06d0      	lsls	r0, r2, #27
 800440c:	bf44      	itt	mi
 800440e:	2320      	movmi	r3, #32
 8004410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004414:	0711      	lsls	r1, r2, #28
 8004416:	bf44      	itt	mi
 8004418:	232b      	movmi	r3, #43	; 0x2b
 800441a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800441e:	f89a 3000 	ldrb.w	r3, [sl]
 8004422:	2b2a      	cmp	r3, #42	; 0x2a
 8004424:	d015      	beq.n	8004452 <_svfiprintf_r+0xf6>
 8004426:	9a07      	ldr	r2, [sp, #28]
 8004428:	4654      	mov	r4, sl
 800442a:	2000      	movs	r0, #0
 800442c:	f04f 0c0a 	mov.w	ip, #10
 8004430:	4621      	mov	r1, r4
 8004432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004436:	3b30      	subs	r3, #48	; 0x30
 8004438:	2b09      	cmp	r3, #9
 800443a:	d94e      	bls.n	80044da <_svfiprintf_r+0x17e>
 800443c:	b1b0      	cbz	r0, 800446c <_svfiprintf_r+0x110>
 800443e:	9207      	str	r2, [sp, #28]
 8004440:	e014      	b.n	800446c <_svfiprintf_r+0x110>
 8004442:	eba0 0308 	sub.w	r3, r0, r8
 8004446:	fa09 f303 	lsl.w	r3, r9, r3
 800444a:	4313      	orrs	r3, r2
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	46a2      	mov	sl, r4
 8004450:	e7d2      	b.n	80043f8 <_svfiprintf_r+0x9c>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	1d19      	adds	r1, r3, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	9103      	str	r1, [sp, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfbb      	ittet	lt
 800445e:	425b      	neglt	r3, r3
 8004460:	f042 0202 	orrlt.w	r2, r2, #2
 8004464:	9307      	strge	r3, [sp, #28]
 8004466:	9307      	strlt	r3, [sp, #28]
 8004468:	bfb8      	it	lt
 800446a:	9204      	strlt	r2, [sp, #16]
 800446c:	7823      	ldrb	r3, [r4, #0]
 800446e:	2b2e      	cmp	r3, #46	; 0x2e
 8004470:	d10c      	bne.n	800448c <_svfiprintf_r+0x130>
 8004472:	7863      	ldrb	r3, [r4, #1]
 8004474:	2b2a      	cmp	r3, #42	; 0x2a
 8004476:	d135      	bne.n	80044e4 <_svfiprintf_r+0x188>
 8004478:	9b03      	ldr	r3, [sp, #12]
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	9203      	str	r2, [sp, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfb8      	it	lt
 8004484:	f04f 33ff 	movlt.w	r3, #4294967295
 8004488:	3402      	adds	r4, #2
 800448a:	9305      	str	r3, [sp, #20]
 800448c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004558 <_svfiprintf_r+0x1fc>
 8004490:	7821      	ldrb	r1, [r4, #0]
 8004492:	2203      	movs	r2, #3
 8004494:	4650      	mov	r0, sl
 8004496:	f7fb feab 	bl	80001f0 <memchr>
 800449a:	b140      	cbz	r0, 80044ae <_svfiprintf_r+0x152>
 800449c:	2340      	movs	r3, #64	; 0x40
 800449e:	eba0 000a 	sub.w	r0, r0, sl
 80044a2:	fa03 f000 	lsl.w	r0, r3, r0
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	4303      	orrs	r3, r0
 80044aa:	3401      	adds	r4, #1
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b2:	4826      	ldr	r0, [pc, #152]	; (800454c <_svfiprintf_r+0x1f0>)
 80044b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044b8:	2206      	movs	r2, #6
 80044ba:	f7fb fe99 	bl	80001f0 <memchr>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d038      	beq.n	8004534 <_svfiprintf_r+0x1d8>
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <_svfiprintf_r+0x1f4>)
 80044c4:	bb1b      	cbnz	r3, 800450e <_svfiprintf_r+0x1b2>
 80044c6:	9b03      	ldr	r3, [sp, #12]
 80044c8:	3307      	adds	r3, #7
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	3308      	adds	r3, #8
 80044d0:	9303      	str	r3, [sp, #12]
 80044d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d4:	4433      	add	r3, r6
 80044d6:	9309      	str	r3, [sp, #36]	; 0x24
 80044d8:	e767      	b.n	80043aa <_svfiprintf_r+0x4e>
 80044da:	fb0c 3202 	mla	r2, ip, r2, r3
 80044de:	460c      	mov	r4, r1
 80044e0:	2001      	movs	r0, #1
 80044e2:	e7a5      	b.n	8004430 <_svfiprintf_r+0xd4>
 80044e4:	2300      	movs	r3, #0
 80044e6:	3401      	adds	r4, #1
 80044e8:	9305      	str	r3, [sp, #20]
 80044ea:	4619      	mov	r1, r3
 80044ec:	f04f 0c0a 	mov.w	ip, #10
 80044f0:	4620      	mov	r0, r4
 80044f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f6:	3a30      	subs	r2, #48	; 0x30
 80044f8:	2a09      	cmp	r2, #9
 80044fa:	d903      	bls.n	8004504 <_svfiprintf_r+0x1a8>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0c5      	beq.n	800448c <_svfiprintf_r+0x130>
 8004500:	9105      	str	r1, [sp, #20]
 8004502:	e7c3      	b.n	800448c <_svfiprintf_r+0x130>
 8004504:	fb0c 2101 	mla	r1, ip, r1, r2
 8004508:	4604      	mov	r4, r0
 800450a:	2301      	movs	r3, #1
 800450c:	e7f0      	b.n	80044f0 <_svfiprintf_r+0x194>
 800450e:	ab03      	add	r3, sp, #12
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	462a      	mov	r2, r5
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <_svfiprintf_r+0x1f8>)
 8004516:	a904      	add	r1, sp, #16
 8004518:	4638      	mov	r0, r7
 800451a:	f3af 8000 	nop.w
 800451e:	1c42      	adds	r2, r0, #1
 8004520:	4606      	mov	r6, r0
 8004522:	d1d6      	bne.n	80044d2 <_svfiprintf_r+0x176>
 8004524:	89ab      	ldrh	r3, [r5, #12]
 8004526:	065b      	lsls	r3, r3, #25
 8004528:	f53f af2c 	bmi.w	8004384 <_svfiprintf_r+0x28>
 800452c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800452e:	b01d      	add	sp, #116	; 0x74
 8004530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004534:	ab03      	add	r3, sp, #12
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	462a      	mov	r2, r5
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <_svfiprintf_r+0x1f8>)
 800453c:	a904      	add	r1, sp, #16
 800453e:	4638      	mov	r0, r7
 8004540:	f000 f87a 	bl	8004638 <_printf_i>
 8004544:	e7eb      	b.n	800451e <_svfiprintf_r+0x1c2>
 8004546:	bf00      	nop
 8004548:	08004b9c 	.word	0x08004b9c
 800454c:	08004ba6 	.word	0x08004ba6
 8004550:	00000000 	.word	0x00000000
 8004554:	080042a5 	.word	0x080042a5
 8004558:	08004ba2 	.word	0x08004ba2

0800455c <_printf_common>:
 800455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	4616      	mov	r6, r2
 8004562:	4699      	mov	r9, r3
 8004564:	688a      	ldr	r2, [r1, #8]
 8004566:	690b      	ldr	r3, [r1, #16]
 8004568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800456c:	4293      	cmp	r3, r2
 800456e:	bfb8      	it	lt
 8004570:	4613      	movlt	r3, r2
 8004572:	6033      	str	r3, [r6, #0]
 8004574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004578:	4607      	mov	r7, r0
 800457a:	460c      	mov	r4, r1
 800457c:	b10a      	cbz	r2, 8004582 <_printf_common+0x26>
 800457e:	3301      	adds	r3, #1
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	0699      	lsls	r1, r3, #26
 8004586:	bf42      	ittt	mi
 8004588:	6833      	ldrmi	r3, [r6, #0]
 800458a:	3302      	addmi	r3, #2
 800458c:	6033      	strmi	r3, [r6, #0]
 800458e:	6825      	ldr	r5, [r4, #0]
 8004590:	f015 0506 	ands.w	r5, r5, #6
 8004594:	d106      	bne.n	80045a4 <_printf_common+0x48>
 8004596:	f104 0a19 	add.w	sl, r4, #25
 800459a:	68e3      	ldr	r3, [r4, #12]
 800459c:	6832      	ldr	r2, [r6, #0]
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	42ab      	cmp	r3, r5
 80045a2:	dc26      	bgt.n	80045f2 <_printf_common+0x96>
 80045a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045a8:	1e13      	subs	r3, r2, #0
 80045aa:	6822      	ldr	r2, [r4, #0]
 80045ac:	bf18      	it	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	0692      	lsls	r2, r2, #26
 80045b2:	d42b      	bmi.n	800460c <_printf_common+0xb0>
 80045b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045b8:	4649      	mov	r1, r9
 80045ba:	4638      	mov	r0, r7
 80045bc:	47c0      	blx	r8
 80045be:	3001      	adds	r0, #1
 80045c0:	d01e      	beq.n	8004600 <_printf_common+0xa4>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	68e5      	ldr	r5, [r4, #12]
 80045c6:	6832      	ldr	r2, [r6, #0]
 80045c8:	f003 0306 	and.w	r3, r3, #6
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	bf08      	it	eq
 80045d0:	1aad      	subeq	r5, r5, r2
 80045d2:	68a3      	ldr	r3, [r4, #8]
 80045d4:	6922      	ldr	r2, [r4, #16]
 80045d6:	bf0c      	ite	eq
 80045d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045dc:	2500      	movne	r5, #0
 80045de:	4293      	cmp	r3, r2
 80045e0:	bfc4      	itt	gt
 80045e2:	1a9b      	subgt	r3, r3, r2
 80045e4:	18ed      	addgt	r5, r5, r3
 80045e6:	2600      	movs	r6, #0
 80045e8:	341a      	adds	r4, #26
 80045ea:	42b5      	cmp	r5, r6
 80045ec:	d11a      	bne.n	8004624 <_printf_common+0xc8>
 80045ee:	2000      	movs	r0, #0
 80045f0:	e008      	b.n	8004604 <_printf_common+0xa8>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4652      	mov	r2, sl
 80045f6:	4649      	mov	r1, r9
 80045f8:	4638      	mov	r0, r7
 80045fa:	47c0      	blx	r8
 80045fc:	3001      	adds	r0, #1
 80045fe:	d103      	bne.n	8004608 <_printf_common+0xac>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004608:	3501      	adds	r5, #1
 800460a:	e7c6      	b.n	800459a <_printf_common+0x3e>
 800460c:	18e1      	adds	r1, r4, r3
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	2030      	movs	r0, #48	; 0x30
 8004612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004616:	4422      	add	r2, r4
 8004618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800461c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004620:	3302      	adds	r3, #2
 8004622:	e7c7      	b.n	80045b4 <_printf_common+0x58>
 8004624:	2301      	movs	r3, #1
 8004626:	4622      	mov	r2, r4
 8004628:	4649      	mov	r1, r9
 800462a:	4638      	mov	r0, r7
 800462c:	47c0      	blx	r8
 800462e:	3001      	adds	r0, #1
 8004630:	d0e6      	beq.n	8004600 <_printf_common+0xa4>
 8004632:	3601      	adds	r6, #1
 8004634:	e7d9      	b.n	80045ea <_printf_common+0x8e>
	...

08004638 <_printf_i>:
 8004638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	7e0f      	ldrb	r7, [r1, #24]
 800463e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004640:	2f78      	cmp	r7, #120	; 0x78
 8004642:	4691      	mov	r9, r2
 8004644:	4680      	mov	r8, r0
 8004646:	460c      	mov	r4, r1
 8004648:	469a      	mov	sl, r3
 800464a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800464e:	d807      	bhi.n	8004660 <_printf_i+0x28>
 8004650:	2f62      	cmp	r7, #98	; 0x62
 8004652:	d80a      	bhi.n	800466a <_printf_i+0x32>
 8004654:	2f00      	cmp	r7, #0
 8004656:	f000 80d8 	beq.w	800480a <_printf_i+0x1d2>
 800465a:	2f58      	cmp	r7, #88	; 0x58
 800465c:	f000 80a3 	beq.w	80047a6 <_printf_i+0x16e>
 8004660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004668:	e03a      	b.n	80046e0 <_printf_i+0xa8>
 800466a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800466e:	2b15      	cmp	r3, #21
 8004670:	d8f6      	bhi.n	8004660 <_printf_i+0x28>
 8004672:	a101      	add	r1, pc, #4	; (adr r1, 8004678 <_printf_i+0x40>)
 8004674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004678:	080046d1 	.word	0x080046d1
 800467c:	080046e5 	.word	0x080046e5
 8004680:	08004661 	.word	0x08004661
 8004684:	08004661 	.word	0x08004661
 8004688:	08004661 	.word	0x08004661
 800468c:	08004661 	.word	0x08004661
 8004690:	080046e5 	.word	0x080046e5
 8004694:	08004661 	.word	0x08004661
 8004698:	08004661 	.word	0x08004661
 800469c:	08004661 	.word	0x08004661
 80046a0:	08004661 	.word	0x08004661
 80046a4:	080047f1 	.word	0x080047f1
 80046a8:	08004715 	.word	0x08004715
 80046ac:	080047d3 	.word	0x080047d3
 80046b0:	08004661 	.word	0x08004661
 80046b4:	08004661 	.word	0x08004661
 80046b8:	08004813 	.word	0x08004813
 80046bc:	08004661 	.word	0x08004661
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004661 	.word	0x08004661
 80046c8:	08004661 	.word	0x08004661
 80046cc:	080047db 	.word	0x080047db
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	602a      	str	r2, [r5, #0]
 80046d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0a3      	b.n	800482c <_printf_i+0x1f4>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	6829      	ldr	r1, [r5, #0]
 80046e8:	0606      	lsls	r6, r0, #24
 80046ea:	f101 0304 	add.w	r3, r1, #4
 80046ee:	d50a      	bpl.n	8004706 <_printf_i+0xce>
 80046f0:	680e      	ldr	r6, [r1, #0]
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	2e00      	cmp	r6, #0
 80046f6:	da03      	bge.n	8004700 <_printf_i+0xc8>
 80046f8:	232d      	movs	r3, #45	; 0x2d
 80046fa:	4276      	negs	r6, r6
 80046fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004700:	485e      	ldr	r0, [pc, #376]	; (800487c <_printf_i+0x244>)
 8004702:	230a      	movs	r3, #10
 8004704:	e019      	b.n	800473a <_printf_i+0x102>
 8004706:	680e      	ldr	r6, [r1, #0]
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800470e:	bf18      	it	ne
 8004710:	b236      	sxthne	r6, r6
 8004712:	e7ef      	b.n	80046f4 <_printf_i+0xbc>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	1d19      	adds	r1, r3, #4
 800471a:	6029      	str	r1, [r5, #0]
 800471c:	0601      	lsls	r1, r0, #24
 800471e:	d501      	bpl.n	8004724 <_printf_i+0xec>
 8004720:	681e      	ldr	r6, [r3, #0]
 8004722:	e002      	b.n	800472a <_printf_i+0xf2>
 8004724:	0646      	lsls	r6, r0, #25
 8004726:	d5fb      	bpl.n	8004720 <_printf_i+0xe8>
 8004728:	881e      	ldrh	r6, [r3, #0]
 800472a:	4854      	ldr	r0, [pc, #336]	; (800487c <_printf_i+0x244>)
 800472c:	2f6f      	cmp	r7, #111	; 0x6f
 800472e:	bf0c      	ite	eq
 8004730:	2308      	moveq	r3, #8
 8004732:	230a      	movne	r3, #10
 8004734:	2100      	movs	r1, #0
 8004736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800473a:	6865      	ldr	r5, [r4, #4]
 800473c:	60a5      	str	r5, [r4, #8]
 800473e:	2d00      	cmp	r5, #0
 8004740:	bfa2      	ittt	ge
 8004742:	6821      	ldrge	r1, [r4, #0]
 8004744:	f021 0104 	bicge.w	r1, r1, #4
 8004748:	6021      	strge	r1, [r4, #0]
 800474a:	b90e      	cbnz	r6, 8004750 <_printf_i+0x118>
 800474c:	2d00      	cmp	r5, #0
 800474e:	d04d      	beq.n	80047ec <_printf_i+0x1b4>
 8004750:	4615      	mov	r5, r2
 8004752:	fbb6 f1f3 	udiv	r1, r6, r3
 8004756:	fb03 6711 	mls	r7, r3, r1, r6
 800475a:	5dc7      	ldrb	r7, [r0, r7]
 800475c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004760:	4637      	mov	r7, r6
 8004762:	42bb      	cmp	r3, r7
 8004764:	460e      	mov	r6, r1
 8004766:	d9f4      	bls.n	8004752 <_printf_i+0x11a>
 8004768:	2b08      	cmp	r3, #8
 800476a:	d10b      	bne.n	8004784 <_printf_i+0x14c>
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	07de      	lsls	r6, r3, #31
 8004770:	d508      	bpl.n	8004784 <_printf_i+0x14c>
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	6861      	ldr	r1, [r4, #4]
 8004776:	4299      	cmp	r1, r3
 8004778:	bfde      	ittt	le
 800477a:	2330      	movle	r3, #48	; 0x30
 800477c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004780:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004784:	1b52      	subs	r2, r2, r5
 8004786:	6122      	str	r2, [r4, #16]
 8004788:	f8cd a000 	str.w	sl, [sp]
 800478c:	464b      	mov	r3, r9
 800478e:	aa03      	add	r2, sp, #12
 8004790:	4621      	mov	r1, r4
 8004792:	4640      	mov	r0, r8
 8004794:	f7ff fee2 	bl	800455c <_printf_common>
 8004798:	3001      	adds	r0, #1
 800479a:	d14c      	bne.n	8004836 <_printf_i+0x1fe>
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	b004      	add	sp, #16
 80047a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a6:	4835      	ldr	r0, [pc, #212]	; (800487c <_printf_i+0x244>)
 80047a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047ac:	6829      	ldr	r1, [r5, #0]
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b4:	6029      	str	r1, [r5, #0]
 80047b6:	061d      	lsls	r5, r3, #24
 80047b8:	d514      	bpl.n	80047e4 <_printf_i+0x1ac>
 80047ba:	07df      	lsls	r7, r3, #31
 80047bc:	bf44      	itt	mi
 80047be:	f043 0320 	orrmi.w	r3, r3, #32
 80047c2:	6023      	strmi	r3, [r4, #0]
 80047c4:	b91e      	cbnz	r6, 80047ce <_printf_i+0x196>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	f023 0320 	bic.w	r3, r3, #32
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	2310      	movs	r3, #16
 80047d0:	e7b0      	b.n	8004734 <_printf_i+0xfc>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f043 0320 	orr.w	r3, r3, #32
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	2378      	movs	r3, #120	; 0x78
 80047dc:	4828      	ldr	r0, [pc, #160]	; (8004880 <_printf_i+0x248>)
 80047de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047e2:	e7e3      	b.n	80047ac <_printf_i+0x174>
 80047e4:	0659      	lsls	r1, r3, #25
 80047e6:	bf48      	it	mi
 80047e8:	b2b6      	uxthmi	r6, r6
 80047ea:	e7e6      	b.n	80047ba <_printf_i+0x182>
 80047ec:	4615      	mov	r5, r2
 80047ee:	e7bb      	b.n	8004768 <_printf_i+0x130>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	6826      	ldr	r6, [r4, #0]
 80047f4:	6961      	ldr	r1, [r4, #20]
 80047f6:	1d18      	adds	r0, r3, #4
 80047f8:	6028      	str	r0, [r5, #0]
 80047fa:	0635      	lsls	r5, r6, #24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	d501      	bpl.n	8004804 <_printf_i+0x1cc>
 8004800:	6019      	str	r1, [r3, #0]
 8004802:	e002      	b.n	800480a <_printf_i+0x1d2>
 8004804:	0670      	lsls	r0, r6, #25
 8004806:	d5fb      	bpl.n	8004800 <_printf_i+0x1c8>
 8004808:	8019      	strh	r1, [r3, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	4615      	mov	r5, r2
 8004810:	e7ba      	b.n	8004788 <_printf_i+0x150>
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	602a      	str	r2, [r5, #0]
 8004818:	681d      	ldr	r5, [r3, #0]
 800481a:	6862      	ldr	r2, [r4, #4]
 800481c:	2100      	movs	r1, #0
 800481e:	4628      	mov	r0, r5
 8004820:	f7fb fce6 	bl	80001f0 <memchr>
 8004824:	b108      	cbz	r0, 800482a <_printf_i+0x1f2>
 8004826:	1b40      	subs	r0, r0, r5
 8004828:	6060      	str	r0, [r4, #4]
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	6123      	str	r3, [r4, #16]
 800482e:	2300      	movs	r3, #0
 8004830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004834:	e7a8      	b.n	8004788 <_printf_i+0x150>
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	462a      	mov	r2, r5
 800483a:	4649      	mov	r1, r9
 800483c:	4640      	mov	r0, r8
 800483e:	47d0      	blx	sl
 8004840:	3001      	adds	r0, #1
 8004842:	d0ab      	beq.n	800479c <_printf_i+0x164>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	079b      	lsls	r3, r3, #30
 8004848:	d413      	bmi.n	8004872 <_printf_i+0x23a>
 800484a:	68e0      	ldr	r0, [r4, #12]
 800484c:	9b03      	ldr	r3, [sp, #12]
 800484e:	4298      	cmp	r0, r3
 8004850:	bfb8      	it	lt
 8004852:	4618      	movlt	r0, r3
 8004854:	e7a4      	b.n	80047a0 <_printf_i+0x168>
 8004856:	2301      	movs	r3, #1
 8004858:	4632      	mov	r2, r6
 800485a:	4649      	mov	r1, r9
 800485c:	4640      	mov	r0, r8
 800485e:	47d0      	blx	sl
 8004860:	3001      	adds	r0, #1
 8004862:	d09b      	beq.n	800479c <_printf_i+0x164>
 8004864:	3501      	adds	r5, #1
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	9903      	ldr	r1, [sp, #12]
 800486a:	1a5b      	subs	r3, r3, r1
 800486c:	42ab      	cmp	r3, r5
 800486e:	dcf2      	bgt.n	8004856 <_printf_i+0x21e>
 8004870:	e7eb      	b.n	800484a <_printf_i+0x212>
 8004872:	2500      	movs	r5, #0
 8004874:	f104 0619 	add.w	r6, r4, #25
 8004878:	e7f5      	b.n	8004866 <_printf_i+0x22e>
 800487a:	bf00      	nop
 800487c:	08004bad 	.word	0x08004bad
 8004880:	08004bbe 	.word	0x08004bbe

08004884 <memcpy>:
 8004884:	440a      	add	r2, r1
 8004886:	4291      	cmp	r1, r2
 8004888:	f100 33ff 	add.w	r3, r0, #4294967295
 800488c:	d100      	bne.n	8004890 <memcpy+0xc>
 800488e:	4770      	bx	lr
 8004890:	b510      	push	{r4, lr}
 8004892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489a:	4291      	cmp	r1, r2
 800489c:	d1f9      	bne.n	8004892 <memcpy+0xe>
 800489e:	bd10      	pop	{r4, pc}

080048a0 <memmove>:
 80048a0:	4288      	cmp	r0, r1
 80048a2:	b510      	push	{r4, lr}
 80048a4:	eb01 0402 	add.w	r4, r1, r2
 80048a8:	d902      	bls.n	80048b0 <memmove+0x10>
 80048aa:	4284      	cmp	r4, r0
 80048ac:	4623      	mov	r3, r4
 80048ae:	d807      	bhi.n	80048c0 <memmove+0x20>
 80048b0:	1e43      	subs	r3, r0, #1
 80048b2:	42a1      	cmp	r1, r4
 80048b4:	d008      	beq.n	80048c8 <memmove+0x28>
 80048b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048be:	e7f8      	b.n	80048b2 <memmove+0x12>
 80048c0:	4402      	add	r2, r0
 80048c2:	4601      	mov	r1, r0
 80048c4:	428a      	cmp	r2, r1
 80048c6:	d100      	bne.n	80048ca <memmove+0x2a>
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048d2:	e7f7      	b.n	80048c4 <memmove+0x24>

080048d4 <_free_r>:
 80048d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048d6:	2900      	cmp	r1, #0
 80048d8:	d044      	beq.n	8004964 <_free_r+0x90>
 80048da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048de:	9001      	str	r0, [sp, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f1a1 0404 	sub.w	r4, r1, #4
 80048e6:	bfb8      	it	lt
 80048e8:	18e4      	addlt	r4, r4, r3
 80048ea:	f000 f913 	bl	8004b14 <__malloc_lock>
 80048ee:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <_free_r+0x94>)
 80048f0:	9801      	ldr	r0, [sp, #4]
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	b933      	cbnz	r3, 8004904 <_free_r+0x30>
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	6014      	str	r4, [r2, #0]
 80048fa:	b003      	add	sp, #12
 80048fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004900:	f000 b90e 	b.w	8004b20 <__malloc_unlock>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d908      	bls.n	800491a <_free_r+0x46>
 8004908:	6825      	ldr	r5, [r4, #0]
 800490a:	1961      	adds	r1, r4, r5
 800490c:	428b      	cmp	r3, r1
 800490e:	bf01      	itttt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	1949      	addeq	r1, r1, r5
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	e7ed      	b.n	80048f6 <_free_r+0x22>
 800491a:	461a      	mov	r2, r3
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b10b      	cbz	r3, 8004924 <_free_r+0x50>
 8004920:	42a3      	cmp	r3, r4
 8004922:	d9fa      	bls.n	800491a <_free_r+0x46>
 8004924:	6811      	ldr	r1, [r2, #0]
 8004926:	1855      	adds	r5, r2, r1
 8004928:	42a5      	cmp	r5, r4
 800492a:	d10b      	bne.n	8004944 <_free_r+0x70>
 800492c:	6824      	ldr	r4, [r4, #0]
 800492e:	4421      	add	r1, r4
 8004930:	1854      	adds	r4, r2, r1
 8004932:	42a3      	cmp	r3, r4
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	d1e0      	bne.n	80048fa <_free_r+0x26>
 8004938:	681c      	ldr	r4, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	6053      	str	r3, [r2, #4]
 800493e:	4421      	add	r1, r4
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	e7da      	b.n	80048fa <_free_r+0x26>
 8004944:	d902      	bls.n	800494c <_free_r+0x78>
 8004946:	230c      	movs	r3, #12
 8004948:	6003      	str	r3, [r0, #0]
 800494a:	e7d6      	b.n	80048fa <_free_r+0x26>
 800494c:	6825      	ldr	r5, [r4, #0]
 800494e:	1961      	adds	r1, r4, r5
 8004950:	428b      	cmp	r3, r1
 8004952:	bf04      	itt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	6063      	str	r3, [r4, #4]
 800495a:	bf04      	itt	eq
 800495c:	1949      	addeq	r1, r1, r5
 800495e:	6021      	streq	r1, [r4, #0]
 8004960:	6054      	str	r4, [r2, #4]
 8004962:	e7ca      	b.n	80048fa <_free_r+0x26>
 8004964:	b003      	add	sp, #12
 8004966:	bd30      	pop	{r4, r5, pc}
 8004968:	20000178 	.word	0x20000178

0800496c <sbrk_aligned>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4e0e      	ldr	r6, [pc, #56]	; (80049a8 <sbrk_aligned+0x3c>)
 8004970:	460c      	mov	r4, r1
 8004972:	6831      	ldr	r1, [r6, #0]
 8004974:	4605      	mov	r5, r0
 8004976:	b911      	cbnz	r1, 800497e <sbrk_aligned+0x12>
 8004978:	f000 f8bc 	bl	8004af4 <_sbrk_r>
 800497c:	6030      	str	r0, [r6, #0]
 800497e:	4621      	mov	r1, r4
 8004980:	4628      	mov	r0, r5
 8004982:	f000 f8b7 	bl	8004af4 <_sbrk_r>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	d00a      	beq.n	80049a0 <sbrk_aligned+0x34>
 800498a:	1cc4      	adds	r4, r0, #3
 800498c:	f024 0403 	bic.w	r4, r4, #3
 8004990:	42a0      	cmp	r0, r4
 8004992:	d007      	beq.n	80049a4 <sbrk_aligned+0x38>
 8004994:	1a21      	subs	r1, r4, r0
 8004996:	4628      	mov	r0, r5
 8004998:	f000 f8ac 	bl	8004af4 <_sbrk_r>
 800499c:	3001      	adds	r0, #1
 800499e:	d101      	bne.n	80049a4 <sbrk_aligned+0x38>
 80049a0:	f04f 34ff 	mov.w	r4, #4294967295
 80049a4:	4620      	mov	r0, r4
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	2000017c 	.word	0x2000017c

080049ac <_malloc_r>:
 80049ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b0:	1ccd      	adds	r5, r1, #3
 80049b2:	f025 0503 	bic.w	r5, r5, #3
 80049b6:	3508      	adds	r5, #8
 80049b8:	2d0c      	cmp	r5, #12
 80049ba:	bf38      	it	cc
 80049bc:	250c      	movcc	r5, #12
 80049be:	2d00      	cmp	r5, #0
 80049c0:	4607      	mov	r7, r0
 80049c2:	db01      	blt.n	80049c8 <_malloc_r+0x1c>
 80049c4:	42a9      	cmp	r1, r5
 80049c6:	d905      	bls.n	80049d4 <_malloc_r+0x28>
 80049c8:	230c      	movs	r3, #12
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	2600      	movs	r6, #0
 80049ce:	4630      	mov	r0, r6
 80049d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d4:	4e2e      	ldr	r6, [pc, #184]	; (8004a90 <_malloc_r+0xe4>)
 80049d6:	f000 f89d 	bl	8004b14 <__malloc_lock>
 80049da:	6833      	ldr	r3, [r6, #0]
 80049dc:	461c      	mov	r4, r3
 80049de:	bb34      	cbnz	r4, 8004a2e <_malloc_r+0x82>
 80049e0:	4629      	mov	r1, r5
 80049e2:	4638      	mov	r0, r7
 80049e4:	f7ff ffc2 	bl	800496c <sbrk_aligned>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	4604      	mov	r4, r0
 80049ec:	d14d      	bne.n	8004a8a <_malloc_r+0xde>
 80049ee:	6834      	ldr	r4, [r6, #0]
 80049f0:	4626      	mov	r6, r4
 80049f2:	2e00      	cmp	r6, #0
 80049f4:	d140      	bne.n	8004a78 <_malloc_r+0xcc>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	4631      	mov	r1, r6
 80049fa:	4638      	mov	r0, r7
 80049fc:	eb04 0803 	add.w	r8, r4, r3
 8004a00:	f000 f878 	bl	8004af4 <_sbrk_r>
 8004a04:	4580      	cmp	r8, r0
 8004a06:	d13a      	bne.n	8004a7e <_malloc_r+0xd2>
 8004a08:	6821      	ldr	r1, [r4, #0]
 8004a0a:	3503      	adds	r5, #3
 8004a0c:	1a6d      	subs	r5, r5, r1
 8004a0e:	f025 0503 	bic.w	r5, r5, #3
 8004a12:	3508      	adds	r5, #8
 8004a14:	2d0c      	cmp	r5, #12
 8004a16:	bf38      	it	cc
 8004a18:	250c      	movcc	r5, #12
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	f7ff ffa5 	bl	800496c <sbrk_aligned>
 8004a22:	3001      	adds	r0, #1
 8004a24:	d02b      	beq.n	8004a7e <_malloc_r+0xd2>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	442b      	add	r3, r5
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	e00e      	b.n	8004a4c <_malloc_r+0xa0>
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	1b52      	subs	r2, r2, r5
 8004a32:	d41e      	bmi.n	8004a72 <_malloc_r+0xc6>
 8004a34:	2a0b      	cmp	r2, #11
 8004a36:	d916      	bls.n	8004a66 <_malloc_r+0xba>
 8004a38:	1961      	adds	r1, r4, r5
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	6025      	str	r5, [r4, #0]
 8004a3e:	bf18      	it	ne
 8004a40:	6059      	strne	r1, [r3, #4]
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	bf08      	it	eq
 8004a46:	6031      	streq	r1, [r6, #0]
 8004a48:	5162      	str	r2, [r4, r5]
 8004a4a:	604b      	str	r3, [r1, #4]
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f104 060b 	add.w	r6, r4, #11
 8004a52:	f000 f865 	bl	8004b20 <__malloc_unlock>
 8004a56:	f026 0607 	bic.w	r6, r6, #7
 8004a5a:	1d23      	adds	r3, r4, #4
 8004a5c:	1af2      	subs	r2, r6, r3
 8004a5e:	d0b6      	beq.n	80049ce <_malloc_r+0x22>
 8004a60:	1b9b      	subs	r3, r3, r6
 8004a62:	50a3      	str	r3, [r4, r2]
 8004a64:	e7b3      	b.n	80049ce <_malloc_r+0x22>
 8004a66:	6862      	ldr	r2, [r4, #4]
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	bf0c      	ite	eq
 8004a6c:	6032      	streq	r2, [r6, #0]
 8004a6e:	605a      	strne	r2, [r3, #4]
 8004a70:	e7ec      	b.n	8004a4c <_malloc_r+0xa0>
 8004a72:	4623      	mov	r3, r4
 8004a74:	6864      	ldr	r4, [r4, #4]
 8004a76:	e7b2      	b.n	80049de <_malloc_r+0x32>
 8004a78:	4634      	mov	r4, r6
 8004a7a:	6876      	ldr	r6, [r6, #4]
 8004a7c:	e7b9      	b.n	80049f2 <_malloc_r+0x46>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4638      	mov	r0, r7
 8004a84:	f000 f84c 	bl	8004b20 <__malloc_unlock>
 8004a88:	e7a1      	b.n	80049ce <_malloc_r+0x22>
 8004a8a:	6025      	str	r5, [r4, #0]
 8004a8c:	e7de      	b.n	8004a4c <_malloc_r+0xa0>
 8004a8e:	bf00      	nop
 8004a90:	20000178 	.word	0x20000178

08004a94 <_realloc_r>:
 8004a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a98:	4680      	mov	r8, r0
 8004a9a:	4614      	mov	r4, r2
 8004a9c:	460e      	mov	r6, r1
 8004a9e:	b921      	cbnz	r1, 8004aaa <_realloc_r+0x16>
 8004aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f7ff bf81 	b.w	80049ac <_malloc_r>
 8004aaa:	b92a      	cbnz	r2, 8004ab8 <_realloc_r+0x24>
 8004aac:	f7ff ff12 	bl	80048d4 <_free_r>
 8004ab0:	4625      	mov	r5, r4
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab8:	f000 f838 	bl	8004b2c <_malloc_usable_size_r>
 8004abc:	4284      	cmp	r4, r0
 8004abe:	4607      	mov	r7, r0
 8004ac0:	d802      	bhi.n	8004ac8 <_realloc_r+0x34>
 8004ac2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ac6:	d812      	bhi.n	8004aee <_realloc_r+0x5a>
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4640      	mov	r0, r8
 8004acc:	f7ff ff6e 	bl	80049ac <_malloc_r>
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d0ed      	beq.n	8004ab2 <_realloc_r+0x1e>
 8004ad6:	42bc      	cmp	r4, r7
 8004ad8:	4622      	mov	r2, r4
 8004ada:	4631      	mov	r1, r6
 8004adc:	bf28      	it	cs
 8004ade:	463a      	movcs	r2, r7
 8004ae0:	f7ff fed0 	bl	8004884 <memcpy>
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f7ff fef4 	bl	80048d4 <_free_r>
 8004aec:	e7e1      	b.n	8004ab2 <_realloc_r+0x1e>
 8004aee:	4635      	mov	r5, r6
 8004af0:	e7df      	b.n	8004ab2 <_realloc_r+0x1e>
	...

08004af4 <_sbrk_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d06      	ldr	r5, [pc, #24]	; (8004b10 <_sbrk_r+0x1c>)
 8004af8:	2300      	movs	r3, #0
 8004afa:	4604      	mov	r4, r0
 8004afc:	4608      	mov	r0, r1
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	f7fc f8fa 	bl	8000cf8 <_sbrk>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_sbrk_r+0x1a>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_sbrk_r+0x1a>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000180 	.word	0x20000180

08004b14 <__malloc_lock>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__malloc_lock+0x8>)
 8004b16:	f000 b811 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	20000184 	.word	0x20000184

08004b20 <__malloc_unlock>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__malloc_unlock+0x8>)
 8004b22:	f000 b80c 	b.w	8004b3e <__retarget_lock_release_recursive>
 8004b26:	bf00      	nop
 8004b28:	20000184 	.word	0x20000184

08004b2c <_malloc_usable_size_r>:
 8004b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b30:	1f18      	subs	r0, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bfbc      	itt	lt
 8004b36:	580b      	ldrlt	r3, [r1, r0]
 8004b38:	18c0      	addlt	r0, r0, r3
 8004b3a:	4770      	bx	lr

08004b3c <__retarget_lock_acquire_recursive>:
 8004b3c:	4770      	bx	lr

08004b3e <__retarget_lock_release_recursive>:
 8004b3e:	4770      	bx	lr

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr
